// Introduction
// Prime number p is safe prime if number (p - 1) / 2 is also prime.

// Consider all residues x modulo n, for which gcd(x, n) = 1. This set is called multiplicative group of residues modulo n.

// In certain cases that group is cyclic (in prime modulo case, for example), which means it generated by powers of some element.

// Task
// Your task is to find the smallest generator of multiplicative group of residues, if given modulus is safe prime. Otherwise return -1.

// Modulus will not exceed 128 bits.

// There is more general version of this problem.

// Restrictions
// require is not allowed and most builtins are frozen.

function isPrime(n) {
    if (n <= 1n) return false;
    if (n <= 3n) return true;
    if (n % 2n === 0n || n % 3n === 0n) return false;
    for (let i = 5n; i * i <= n; i += 6n) {
      if (n % i === 0n || n % (i + 2n) === 0n) return false;
    }
    return true;
  }
  
  function powerMod(base, exponent, modulus) {
    let result = 1n;
    base = base % modulus;
    while (exponent > 0n) {
      if (exponent % 2n === 1n) {
        result = (result * base) % modulus;
      }
      exponent = exponent >> 1n;
      base = (base * base) % modulus;
    }
    return result;
  }
  
  function findGenerator(n) {
    if (!isPrime(n)) return -1n;
    
    const q = (n - 1n) / 2n;
    if (!isPrime(q)) return -1n;
  
    // Check for smallest generator
    for (let g = 2n; g < n; g++) {
      if (powerMod(g, q, n) !== 1n && powerMod(g, 2n, n) !== 1n) {
        return g;
      }
    }
    
    return -1n;
  }
  
  // Example usage:
  console.log(findGenerator(23n)); // Example output: 5
  console.log(findGenerator(47n)); // Example output: 5
  console.log(findGenerator(817529782747804747310384739524414281));  // Example output: -1